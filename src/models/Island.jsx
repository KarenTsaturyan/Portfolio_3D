/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: polish_farmer/ Eryk StaÅ„ko (https://sketchfab.com/polish_farmer)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/hedgehog-island-labolatory-fan-art-a036aa74dd234c07a3a2af19cff18dc6
Title: HEDGEHOG ISLAND LABOLATORY Fan Art
*/

import { useRef, useEffect, useState } from "react";
import { a } from "@react-spring/three";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import islandScene from "../assets/3d/Home3D.glb";


export function Island({
  isRotating,
  setIsRotating,
  position,
  setIsShooting,
  ...props
}) {
  const islandRef = useRef();
  const oneTime = useRef(false);

  const [color, setColor] = useState("#a1612f");
  const [blinking, setBlinking] = useState(true);

  const { nodes, materials } = useGLTF(islandScene);

  const handleOnClick = (e) => {
    if (oneTime.current) return; // To make unable to change the island;

    let clientX = e.touches ? e.touches[0].clientX : e.clientX;
    let clientY = e.touches ? e.touches[0].clientY : e.clientY;
    // console.log(clientX, clientY);
    if (clientY < 450) clientY = 450;
    setIsShooting(true);
    props.onTargetPositionChange([clientX, clientY, 0]); // x, y, z
    // console.log(position);
    oneTime.current = true;
  };

  useFrame((state) => {
    const time = state.clock.getElapsedTime();
    // Adjust the amplitude and frequency for a gentle floating motion
    islandRef.current.position.y = position[1] + Math.sin(time * 0.5) * 1.8;
  });

  useEffect(() => {
    let intervalId;

    if (blinking) {
      // Change color between red and blue every second
      let isChanged = true;
      intervalId = setInterval(() => {
        setColor(isChanged ? "#a1612f" : "#9ba122");

        isChanged = !isChanged; // Toggle the color
      }, 1000);
    } else {
      clearInterval(intervalId);
      setColor("");
    }

    // Cleanup on component unmount or isActive change
    return () => clearInterval(intervalId);
  }, [blinking]);

  return (
    <a.group ref={islandRef} position={position} {...props} dispose={null}>
      <a.group
        rotation={[-Math.PI / 2, 0, 0]}
        scale={0.015}
        onClick={handleOnClick}
      >
        <mesh
          geometry={nodes.Object_11.geometry}
          material={materials.island_Connector_CURVE}
        />
        <mesh
          geometry={nodes.Object_13.geometry}
          material={materials.machine_MAIN}
        />
        <mesh
          geometry={nodes.Object_14.geometry}
          material={materials.machine_REACTOR}
          position={[-2265.561, -348.512, -15.561]}
          rotation={[0, 0, -0.218]}
        />
        <mesh
          geometry={nodes.Object_15.geometry}
          material={materials.machine_REACTOR_transparent}
        />
        <mesh
          geometry={nodes.Object_16.geometry}
          material={materials.machine_RENTGEN}
          position={[2187.849, -81.301, -5.496]}
        />
        <mesh
          geometry={nodes.Object_17.geometry}
          material={materials.machine_TELEPORT_flash}
          position={[93.938, -282.174, 8.082]}
          rotation={[0, 0, 0.939]}
        />
        <mesh
          geometry={nodes.Object_18.geometry}
          material={materials.machine_TELEPORT_transparent}
          position={[93.938, -282.174, 8.082]}
          rotation={[0, 0, 0.939]}
        />
        <mesh geometry={nodes.Object_2.geometry} material={materials.BALOON} />
        <mesh
          geometry={nodes.Object_20.geometry}
          material={materials.ISLAND_BASE}
          onClick={() => {
            setBlinking(false);
          }}
        >
          {!blinking ? (
            <primitive attach="material" object={materials.ISLAND_BASE} />
          ) : (
            <meshStandardMaterial color={color} />
          )}
        </mesh>
        <mesh
          geometry={nodes.Object_21.geometry}
          material={materials.ISLAND_BASE}
        />
        <mesh
          geometry={nodes.Object_23.geometry}
          material={materials.machine_PRINTER}
          position={[93.871, -5.031, -5.122]}
          rotation={[0, 0, -0.786]}
        />
        <mesh
          geometry={nodes.Object_25.geometry}
          material={materials.machine_TELEPORT}
          position={[93.938, -282.174, 8.082]}
          rotation={[0, 0, 0.939]}
        />
        <mesh
          geometry={nodes.Object_3.geometry}
          material={materials.BALOON_BULB}
        />
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials.BALOON_CURVE}
        />
        <mesh
          geometry={nodes.Object_5.geometry}
          material={materials.DROPS_PIPE}
        />
      </a.group>
      <a.group
        position={[30.714, 0.004, 0.045]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={0.015}
        onClick={handleOnClick}
      >
        <mesh
          geometry={nodes.Object_13001.geometry}
          material={materials["machine_MAIN.001"]}
          rotation={[0, 0, -0.324]}
        />
      </a.group>
      <a.group
        position={[-33.781, 0.052, 0.682]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={0.015}
        onClick={handleOnClick}
      >
        <mesh
          geometry={nodes.Object_13002.geometry}
          material={materials["machine_MAIN.002"]}
          position={[146.485, 0, 0]}
          rotation={[0, 0, 0.576]}
        />
      </a.group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Text.geometry}
        material={materials["Material.001"]}
        position={[-1.837, 8.53, -4.4]}
        rotation={[1.539, 0, 0]}
        scale={1.589}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Text2.geometry}
        material={materials["Material.002"]}
        position={[30.85, 8.992, -4.7]}
        rotation={[1.541, -0.011, 0.345]}
        scale={1.589}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.text3.geometry}
        material={materials["Material.003"]}
        position={[-35.13, 8.68, -2.2]}
        rotation={[1.545, 0.018, -0.597]}
        scale={1.589}
      />
      <a.group
        position={[-31.809, 0.236, 0.602]}
        rotation={[-Math.PI / 2, 0, 0.5]}
        scale={0.015}
      >
        <mesh
          geometry={nodes.Object_2002.geometry}
          material={materials["BALOON.003"]}
        />
        <mesh
          geometry={nodes.Object_3001.geometry}
          material={materials["BALOON_BULB.001"]}
        />
        <mesh
          geometry={nodes.Object_4002.geometry}
          material={materials["BALOON_CURVE.003"]}
        />
      </a.group>
      <a.group
        position={[31.739, -0.141, -0.633]}
        rotation={[-Math.PI / 2, 0, -0.5]}
        scale={0.015}
      >
        <mesh
          geometry={nodes.Object_2001.geometry}
          material={materials["BALOON.004"]}
        />
        <mesh
          geometry={nodes.Object_3002.geometry}
          material={materials["BALOON_BULB.002"]}
        />
        <mesh
          geometry={nodes.Object_4001.geometry}
          material={materials["BALOON_CURVE.004"]}
        />
      </a.group>
    </a.group>
  );
}

export default Island;
